Performance tests of ECS
Code comparison between ECS & Serverless, for hello-world https
  * Complex: VPC, Subnets, Domains (seems required), Certificates, ALB, ECR, ECS, Service definition, tasks, 
  * Had to request cert via console, validate by changing CNAME.  Serverless gives you domain out of the box.
  * Terraform not as nice as yaml+cloudFormation, in my opinion
    * Terraform more complex
    * Terraform names for things
    * state lock issues when cancelling terraform plan mid-way
    * doesn't create S3 bucket or dynamodb statelock table for you
    * problems applying, without any helpful errors (it was user error though)
    * Changing defaults for modules doesn't apply changes once created..
    * Have to do terraform init sometimes when adding new modules, and terraform plan otherwise.  Why not a single command?
    * Lots of trial and error building required terraform scripts
    * No rollback
    * Wow, destroy took ages... (15 minutes ish)
  * Additional dependency on docker - need to install locally
    * Docker installer is 500MB
    * Lots of images to download
    * ECR push slow, image much bigger than serverless package.  269.44MB, but looked like it pushed 700MB... (due to compression.  670MB for node8 image, 755MB for app image)
    * Docker unreliable on Windows.  Port re-use needs docker restart: https://github.com/docker/for-win/issues/1967
  * VPC, ALB, DNS slow to create
  * More limits with low level concepts, forcing to need to share
    * VPC, ECS cluster (if using ECS directly) probably want to share across services
    * VPCs per region: 5 (there's a default VPC created in each region)
    * Subnets per VPC: 200
    * IPv4 CIDR blocks per VPC: 5
    * IPv6 CIDR blocks per VPC
    * Elastic IP addresses per region: 5
  * Finally got hello world working, after about 14 hours work..
    * fargate-hello-684579960.eu-west-1.elb.amazonaws.com
    * Turns out domain, route53 & certs aren't required, unless of course you actually want to map a domain

NEXT: Average latency of lambda trigger: SNS, SQS, Dynamo, 
  * Explain what Lambda can be subscribed to
  * Tip: Subscription enable/disable

NEXT: Azure: WebSites/Functions Hello world

NEXT: Costs between different options
  * AWS billed in 100ms increments, 0.27ms execution time => 100ms billed
  * Memory size affects overall container performance, not just memory size

Session ideas:
* Why not?  Cold starts.  Explore cold start latency.  Multiple concurrent.  Explain.
  * Dotnet cold starts slower
* Ask lots of questions
  * Azure/AWS experience
  * Serverless experience
  * ECS/EKS/Fargate experience
* Explain benefit of serverless framework over serverless with cloud formation
* Ideas on how to use Fargate, but keep per service cost low?


https://forum.serverless.com/t/best-practice-question-api-call-lambda-invoke-or-require/873/13
https://github.com/nik-kor/http-libraries-perf-test
https://logz.io/blog/aws-eks-ecs-and-fargate/
https://medium.com/devopslinks/ecs-vs-eks-vs-fargate-the-good-the-bad-the-ugly-9f68bfc3bb73
https://blog.oxalide.io/post/aws-fargate/
http://expressjs.com/en/starter/hello-world.html
https://nodejs.org/en/docs/guides/nodejs-docker-webapp/
Nice fargate diagram: https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/services/ECS
Helped me out with Fargate execution role: https://040code.github.io/2018/01/30/fargate_with_terraform/
When not to do serverless: https://medium.com/@PaulDJohnston/when-not-to-use-serverless-jeff-6d054d0e7098
CloudFront serverless: https://www.npmjs.com/package/serverless-plugin-cloudfront-lambda-edge
Lambda invoke reference: https://gist.github.com/jjasonclark/283192301950c6e75b4cccb26b1c8ea6
When not to use serverless: https://serverless.com/blog/when-why-not-use-serverless/
Serverless is not a silver bullet, but it's close: https://medium.com/@elliot_f/serverless-is-not-a-silver-bullet-but-its-close-e79c520b2b87
Performance by language: https://read.acloud.guru/comparing-aws-lambda-performance-when-using-node-js-java-c-or-python-281bef2c740f